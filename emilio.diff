diff --git a/app/Http/Controllers/SerieController.php b/app/Http/Controllers/SerieController.php
index e8fa7b7..6456490 100644
--- a/app/Http/Controllers/SerieController.php
+++ b/app/Http/Controllers/SerieController.php
@@ -4,13 +4,14 @@ namespace App\Http\Controllers;
 
 use App\Serie;
 use Illuminate\Http\Request;
+use Illuminate\Http\Response;
 
 class SerieController extends Controller
 {
     /**
      * Display a listing of the resource.
      *
-     * @return \Illuminate\Http\Response
+     * @return Response
      */
     public function index()
     {
@@ -20,19 +21,21 @@ class SerieController extends Controller
     /**
      * Store a newly created resource in storage.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @return \Illuminate\Http\Response
+     * @param Request $request
+     * @return Response
      */
     public function store(Request $request)
     {
-        //
+        $serie = Serie::create($request->all());
+
+        return response()->json($serie, 201);
     }
 
     /**
      * Display the specified resource.
      *
      * @param  int  $id
-     * @return \Illuminate\Http\Response
+     * @return Response
      */
     public function show($id)
     {
@@ -46,23 +49,35 @@ class SerieController extends Controller
     /**
      * Update the specified resource in storage.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param Request $request
      * @param  int  $id
-     * @return \Illuminate\Http\Response
+     * @return Response
      */
     public function update(Request $request, $id)
     {
-        //
+        $serie = Serie::find($id);
+        $serie->update($request->all());
+
+        return response()->json($serie, 200);
     }
 
     /**
      * Remove the specified resource from storage.
      *
      * @param  int  $id
-     * @return \Illuminate\Http\Response
+     * @return Response
      */
     public function destroy($id)
     {
-        //
+        $serie = Serie::find($id);
+
+        $serie->packages()->detach();
+        $serie->categories()->detach();
+        $serie->users()->detach();
+        $serie->comments()->delete();
+
+        Serie::destroy($id);
+
+        return response(null, 204);
     }
 }
diff --git a/tests/Feature/SerieTest.php b/tests/Feature/SerieTest.php
index 322a97b..1a810f6 100644
--- a/tests/Feature/SerieTest.php
+++ b/tests/Feature/SerieTest.php
@@ -2,8 +2,11 @@
 
 namespace Tests\Feature;
 
+use App\Category;
+use App\Comment;
 use App\Package;
 use App\Serie;
+use App\User;
 use Tests\TestCase;
 use Illuminate\Foundation\Testing\RefreshDatabase;
 
@@ -63,4 +66,60 @@ class SerieTest extends TestCase
             ->assertJsonCount(3, 'packages');
     }
 
+    public function test_create_a_serie_will_returns_the_created_serie() {
+        $response = $this->post('/api/v1/series', [
+            'name' => 'El se単or de los anillos',
+            'description' => 'La mejor saga fantastica',
+            'image' => 'https://i.ebayimg.com/images/g/RZwAAOSwLtxcp6WK/s-l1600.jpg'
+        ]);
+
+        $response
+            ->assertStatus(201)
+            ->assertJsonFragment([
+                'name' => 'El se単or de los anillos',
+                'description' => 'La mejor saga fantastica',
+                'image' => 'https://i.ebayimg.com/images/g/RZwAAOSwLtxcp6WK/s-l1600.jpg'
+            ])
+            ->assertJsonCount(6);
+    }
+
+    public function test_update_a_serie_will_returns_the_updated_serie() {
+        $serie = factory(Serie::class)->create();
+
+        $response = $this->put('/api/v1/series/'. $serie->id, [
+            'name' => 'El se単or de los anillos',
+            'description' => 'La mejor saga fantastica'
+        ]);
+
+        $response
+            ->assertStatus(200)
+            ->assertJsonFragment([
+                'name' => 'El se単or de los anillos',
+                'description' => 'La mejor saga fantastica',
+            ])
+            ->assertJsonCount(6);
+    }
+
+    public function test_delete_a_serie_will_returns_empty_response() {
+        $package = factory(Package::class)->create();
+        $category = factory(Category::class)->create();
+        $user = factory(User::class)->create();
+        $serie = factory(Serie::class)->create();
+        $comment = factory(Comment::class)->create([
+            "serie_id" => $serie->id,
+            "user_id" => factory(User::class)->create()
+        ]);
+
+        $serie->comments()->save($comment);
+        $serie->packages()->attach($package);
+        $serie->categories()->attach($category);
+        $serie->users()->attach($user);
+
+        $response = $this->delete('/api/v1/series/'. $serie->id);
+
+        $response->assertStatus(204);
+
+        $this->assertDatabaseMissing("series", ["id" => $serie->id]);
+    }
+
 }
